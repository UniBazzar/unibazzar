%% DynamoDB Listings access pattern (PK/SK + GSIs)
flowchart TB
    subgraph MainTable["📋 Listings Table (Main)"]
        direction TB
        Item["🔑 PK = LISTING#{listing_id}<br/>🔑 SK = META#{timestamp}<br/><br/>📝 Attributes:<br/>• title: 'MacBook Pro 13-inch'<br/>• description: 'Excellent condition...'<br/>• owner_id: 'user-123'<br/>• campus_id: 'university-main'<br/>• category: 'electronics'<br/>• price: 120000 (cents)<br/>• stock: 1<br/>• status: 'available'<br/>• views: 42<br/>• likes: 7<br/>• media_urls: [...]<br/>• created_at: ISO timestamp<br/>• updated_at: ISO timestamp"]
    end

    subgraph GSI1["🏫 GSI: campus_idx"]
        direction TB
        G1["🔑 PK = campus_id<br/>🔑 SK = created_at<br/>📊 Projected: ALL<br/><br/>🎯 Use Case:<br/>Get all listings for a campus<br/>with pagination & time-based sorting"]
    end

    subgraph GSI2["🏷️ GSI: category_idx"]
        G2["🔑 PK = category<br/>🔑 SK = created_at<br/>📊 Projected: ALL<br/><br/>🎯 Use Case:<br/>Browse listings by category<br/>(electronics, books, furniture, etc.)"]
    end

    subgraph GSI3["👤 GSI: seller_idx"]
        G3["🔑 PK = owner_id<br/>🔑 SK = created_at<br/>📊 Projected: ALL<br/><br/>🎯 Use Case:<br/>Get all listings by a specific seller<br/>for profile pages & management"]
    end

    subgraph AccessPatterns["🔍 Query Patterns & Performance"]
        direction TB
        
        subgraph Queries["📊 Common Query Patterns"]
            Q1["🔍 Get Single Listing<br/>GetItem(PK=LISTING#123, SK=META#*)"]
            Q2["🏫 Campus Browse<br/>Query campus_idx WHERE PK=campus_id<br/>LIMIT 20, pagination token"]
            Q3["🏷️ Category Browse<br/>Query category_idx WHERE PK=electronics<br/>FilterExpression: price BETWEEN min AND max"]
            Q4["👤 Seller Profile<br/>Query seller_idx WHERE PK=user-123<br/>ProjectionExpression: title,price,status"]
            Q5["📈 Popular Items<br/>Scan with FilterExpression: views > 100<br/>OR use separate popularity GSI"]
        end
        
        subgraph Counters["📊 Counter Management"]
            C1["⚡ Atomic Counters<br/>UpdateItem: ADD views 1<br/>For low-frequency updates"]
            C2["📦 Batch Updates<br/>Event-driven counter updates<br/>via Lambda/background job<br/>For high-frequency metrics"]
            C3["🚀 Cached Aggregates<br/>Store popular/trending in Redis<br/>Updated hourly via cron job"]
        end
    end

    %% Query flow connections
    Q1 --> Item
    Q2 --> G1
    Q3 --> G2  
    Q4 --> G3

    %% Counter update flows
    Item -.-> C1
    Item -.-> C2
    C2 -.-> C3

    %% Styling
    classDef table fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000;
    classDef gsi fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000;
    classDef query fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000;
    classDef counter fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000;
    
    class Item table;
    class G1,G2,G3 gsi;
    class Q1,Q2,Q3,Q4,Q5 query;
    class C1,C2,C3 counter;
